#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('mage:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 *  Socket.IO events
 */
var ko = require('knockout');

var sockets = [];

var io = require('socket.io')(server);
io.sockets.on('connection', function (socket) {
    
    var clientId = '/#' + socket.client.id;
    
    socket.on('fc-enviar-mensagem', function(mensagem) {
       socket.broadcast.to(socket.parceiroId).emit('fs-enviar-mensagem', mensagem); 
    });
    
    socket.on('fc-exibir-carta', function(cartaSelecionada) {
       socket.broadcast.to(socket.parceiroId).emit('fs-exibir-carta', cartaSelecionada); 
    });
    
    socket.on('fc-remover-carta', function(cartaSelecionada) {
       socket.broadcast.to(socket.parceiroId).emit('fs-remover-carta', cartaSelecionada);
    });
    
    socket.on('fc-criar-sessao-espiritual', function(data) {
       socket.nome = data.nome; 
    });
    
    socket.on('fc-iniciar-consulta', function(data) {
        var parceiroId = '/#'+data.parceiroId;
        var parceiroSocket = io.sockets.connected[parceiroId];
        if(parceiroSocket) {
            parceiroSocket.parceiroId = clientId;
            socket.parceiroId = parceiroId;
            socket.join(parceiroId);
            io.to(parceiroId).emit('fs-iniciar-consulta', { parceiroNome: data.parceiroNome });
            io.to(clientId).emit('fs-nome-parceiro', io.sockets.connected[parceiroId].nome);
        } 
        else {
            io.to(clientId).emit('fs-sessao-inexistente');
        }
    });
    
    socket.on('fc-escrevendo', function(escrevendo) {
       socket.broadcast.to(socket.parceiroId).emit('fs-escrevendo', escrevendo);
    });
        
    socket.on('disconnect', function(status) {
       if(socket.parceiroId) {
           socket.broadcast.to(socket.parceiroId).emit('fs-encerrar-sessao');
       }
    });
    
    socket.on('fc-esconder-descricao-carta', function(esconderDescricaoCartas) {
       socket.broadcast.to(socket.parceiroId).emit('fs-esconder-descricao-carta', esconderDescricaoCartas); 
    });
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
